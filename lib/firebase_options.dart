// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members

import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      // case TargetPlatform.macOS:
      //   return macos;
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  final FirebaseOptions web = FirebaseOptions(
    apiKey: dotenv.env["web_apiKey"]!,
    appId: dotenv.env["web_appId"]!,
    messagingSenderId: dotenv.env["web_messagingSenderId"]!,
    projectId: dotenv.env["web_projectId"]!,
    authDomain: dotenv.env["web_authDomain"]!,
    storageBucket: dotenv.env["web_storageBucket"]!,
    measurementId: dotenv.env["web_measurementId"]!,
  );

  final FirebaseOptions android = FirebaseOptions(
    apiKey: dotenv.env["android_apiKey"]!,
    appId: dotenv.env["android_appId"]!,
    messagingSenderId: dotenv.env["android_messagingSenderId"]!,
    projectId: dotenv.env["android_projectId"]!,
    storageBucket: dotenv.env["android_storageBucket"]!,
  );

  final FirebaseOptions ios = FirebaseOptions(
    apiKey: dotenv.env["ios_apiKey"]!,
    appId: dotenv.env["ios_appId"]!,
    messagingSenderId: dotenv.env["ios_messagingSenderId"]!,
    projectId: dotenv.env["ios_projectId"]!,
    storageBucket: dotenv.env["ios_storageBucket"]!,
    iosBundleId: dotenv.env["ios_iosBundleId"]!,
  );

  // static const FirebaseOptions macos = FirebaseOptions(
  //   apiKey: 'AIzaSyAPOW7wSJ2ImxkD9yq7qOuG9nDeFFC_8Hg',
  //   appId: '1:216626847807:ios:444d1f914ad07ee3a7988a',
  //   messagingSenderId: '216626847807',
  //   projectId: 'taminiapp',
  //   storageBucket: 'taminiapp.appspot.com',
  //   iosBundleId: 'com.tameenk.app.RunnerTests',
  // );
}
